##### Pfad: ./index.html #####
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>GymAI Coach - Your Personal Fitness Assistant</title>
  <link rel="icon" href="data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'><text y='.9em' font-size='90'>ðŸ’ª</text></svg>" />
</head>
<body>
<div id="root"></div>
<script type="module" src="/src/main.tsx"></script>
</body>
</html>


##### Pfad: ./tailwind.config.js #####
import typography from '@tailwindcss/typography';

/** @type {import('tailwindcss').Config} */
export default {
  content: ['./index.html', './src/**/*.{js,ts,jsx,tsx}'],
  theme: {
    extend: {
      animation: {
        'pulse-slow': 'pulse 3s cubic-bezier(0.4, 0, 0.6, 1) infinite',
      },
      colors: {
        'gym-dark': '#111827',
        'gym-blue': '#3B82F6',
      },
    },
  },
  plugins: [typography],
};


##### Pfad: ./eslint.config.js #####
import js from '@eslint/js';
import globals from 'globals';
import reactHooks from 'eslint-plugin-react-hooks';
import reactRefresh from 'eslint-plugin-react-refresh';
import tseslint from 'typescript-eslint';

export default tseslint.config(
  { ignores: ['dist'] },
  {
    extends: [js.configs.recommended, ...tseslint.configs.recommended],
    files: ['**/*.{ts,tsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
    plugins: {
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...reactHooks.configs.recommended.rules,
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  }
);



##### Pfad: ./vite.config.ts #####
import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';

export default defineConfig({
  plugins: [react()],
  optimizeDeps: {
    exclude: ['lucide-react'],
  },
  envPrefix: 'VITE_'
});


##### Pfad: ./postcss.config.js #####
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
};



##### Pfad: ./src/App.tsx #####
import React from 'react';
import { Dumbbell, Trash2 } from 'lucide-react';
import { FeedbackInput } from './components/FeedbackInput';
import { ChatHistory } from './components/ChatHistory';
import { useFeedbackStore } from './store/feedbackStore';

function App() {
    const clearHistory = useFeedbackStore((state) => state.clearHistory);

    // Clear history on page load
    React.useEffect(() => {
        clearHistory();
    }, []);

    const handleLogoClick = () => {
        window.location.reload();
    };

    return (
        <div className="min-h-screen bg-gradient-to-br from-gray-900 to-blue-900">
            <header className="bg-black/50 backdrop-blur-sm border-b border-white/10">
                <div className="max-w-7xl mx-auto px-4 py-4">
                    <div className="flex items-center justify-between">
                        <div
                            className="flex items-center gap-3 cursor-pointer hover:opacity-80 transition-opacity"
                            onClick={handleLogoClick}
                        >
                            <div className="p-2 bg-blue-500 rounded-lg">
                                <Dumbbell className="w-8 h-8 text-white" />
                            </div>
                            <div>
                                <h1 className="text-2xl font-bold text-white">GymAI Coach</h1>
                                <p className="text-blue-200 text-sm">Your personal fitness assistant</p>
                            </div>
                        </div>
                        <button
                            onClick={() => {
                                if (window.confirm('Are you sure you want to clear the chat history?')) {
                                    clearHistory();
                                }
                            }}
                            className="p-2 rounded-lg bg-white/10 hover:bg-white/20 transition-colors"
                            title="Clear chat history"
                        >
                            <Trash2 className="w-5 h-5 text-blue-200" />
                        </button>
                    </div>
                </div>
            </header>

            <main className="max-w-3xl mx-auto px-4 py-8">
                <div className="space-y-8">
                    <section>
                        <FeedbackInput />
                    </section>

                    <section className="space-y-6">
                        <ChatHistory />
                    </section>
                </div>
            </main>
        </div>
    );
}

export default App;


##### Pfad: ./src/main.tsx #####
import { StrictMode } from 'react';
import { createRoot } from 'react-dom/client';
import App from './App';
import './index.css';

createRoot(document.getElementById('root')!).render(
    <StrictMode>
        <App />
    </StrictMode>
);


##### Pfad: ./src/types/index.ts #####
export type FeedbackType = 'text' | 'audio';

export interface Feedback {
  id: string;
  content: string;
  type: FeedbackType;
  timestamp: Date;
  processed: boolean;
}

export interface AIResponse {
  text?: string;
  imageUrl?: string;
  audioUrl?: string;
  type: 'feedback' | 'training' | 'question';
  suggestions?: string[];
}


##### Pfad: ./src/index.css #####
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
    body {
        @apply bg-gym-dark text-white antialiased;
    }

    ::-webkit-scrollbar {
        @apply w-2;
    }

    ::-webkit-scrollbar-track {
        @apply bg-white/5;
    }

    ::-webkit-scrollbar-thumb {
        @apply bg-gym-blue/50 rounded-full hover:bg-gym-blue/70;
    }
}

@layer components {
    .glassmorphism {
        @apply bg-white/10 backdrop-blur-sm border border-white/20;
    }

    .input-base {
        @apply px-4 py-3 rounded-lg bg-white/10 border border-white/20
        text-white placeholder-blue-200
        focus:outline-none focus:ring-2 focus:ring-gym-blue focus:bg-white/20
        disabled:bg-white/5 disabled:cursor-not-allowed;
    }

    .btn-base {
        @apply px-4 py-2 rounded-lg font-medium
        transition-all duration-200
        disabled:opacity-50 disabled:cursor-not-allowed;
    }

    .btn-primary {
        @apply btn-base bg-gym-blue text-white
        hover:bg-gym-blue/80
        active:scale-95;
    }

    .btn-secondary {
        @apply btn-base bg-white/10 text-white
        hover:bg-white/20
        active:scale-95;
    }
}


##### Pfad: ./src/components/FeedbackInput.tsx #####
import React, { useState, useRef } from 'react';
import { Mic, Send } from 'lucide-react';
import { useFeedbackStore } from '../store/feedbackStore';
import { openAIService } from '../services/openai';

export function FeedbackInput() {
  const [text, setText] = useState('');
  const [isRecording, setIsRecording] = useState(false);
  const mediaRecorder = useRef<MediaRecorder | null>(null);
  const chunks = useRef<Blob[]>([]);
  const addMessage = useFeedbackStore((state) => state.addMessage);
  const isProcessing = useFeedbackStore((state) => state.isProcessing);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (text.trim() && !isProcessing) {
      const message = text;
      setText('');
      await addMessage(message, 'text');
    }
  };

  const startRecording = async () => {
    try {
      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
      mediaRecorder.current = new MediaRecorder(stream);
      chunks.current = [];

      mediaRecorder.current.ondataavailable = (e) => {
        if (e.data.size > 0) {
          chunks.current.push(e.data);
        }
      };

      mediaRecorder.current.onstop = async () => {
        const audioBlob = new Blob(chunks.current, { type: 'audio/webm' });
        try {
          const transcription = await openAIService.transcribeAudio(audioBlob);
          await addMessage(transcription, 'audio');
        } catch (error) {
          console.error('Error processing audio:', error);
        }
      };

      mediaRecorder.current.start();
      setIsRecording(true);
    } catch (error) {
      console.error('Error accessing microphone:', error);
    }
  };

  const stopRecording = () => {
    if (mediaRecorder.current && isRecording) {
      mediaRecorder.current.stop();
      mediaRecorder.current.stream.getTracks().forEach(track => track.stop());
      setIsRecording(false);
    }
  };

  const toggleRecording = () => {
    if (isRecording) {
      stopRecording();
    } else {
      startRecording();
    }
  };

  return (
      <form onSubmit={handleSubmit} className="sticky top-4 w-full max-w-2xl mx-auto bg-black/20 backdrop-blur-sm rounded-lg p-4 z-10">
        <div className="flex gap-2">
          <input
              type="text"
              value={text}
              onChange={(e) => setText(e.target.value)}
              placeholder="Ask your fitness coach anything..."
              disabled={isRecording || isProcessing}
              className="flex-1 px-4 py-3 rounded-lg bg-white/10 border border-white/20 text-white placeholder-blue-200 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:bg-white/20"
          />
          <button
              type="button"
              onClick={toggleRecording}
              disabled={isProcessing}
              className={`p-3 rounded-lg ${
                  isRecording ? 'bg-red-500' : 'bg-white/10 border border-white/20'
              } hover:bg-opacity-80 transition-colors disabled:opacity-50 disabled:cursor-not-allowed`}
          >
            <Mic className={`w-6 h-6 ${isRecording ? 'text-white' : 'text-blue-200'}`} />
          </button>
          <button
              type="submit"
              disabled={!text.trim() || isProcessing || isRecording}
              className="bg-blue-500 text-white p-3 rounded-lg hover:bg-blue-600 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
          >
            <Send className="w-6 h-6" />
          </button>
        </div>
      </form>
  );
}


##### Pfad: ./src/components/LoadingSpinner.tsx #####
import React from 'react';

export function LoadingSpinner() {
    return (
        <div className="flex items-center justify-center p-4">
            <svg className="w-12 h-12 animate-spin" viewBox="0 0 24 24">
                <circle
                    className="opacity-25"
                    cx="12" cy="12" r="10"
                    stroke="currentColor"
                    strokeWidth="4"
                    fill="none"
                />
                <path
                    className="opacity-75"
                    fill="currentColor"
                    d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
                />
            </svg>
        </div>
    );
}

export function DumbbellLoader() {
    return (
        <div className="flex flex-col items-center justify-center p-4 text-blue-400">
            <div className="relative">
                <div className="w-16 h-4 bg-current rounded-full absolute top-6 animate-pulse" />
                <div className="w-4 h-16 bg-current rounded-full animate-bounce">
                    <div className="w-8 h-8 bg-current rounded-full absolute -left-2 -top-2" />
                    <div className="w-8 h-8 bg-current rounded-full absolute -left-2 -bottom-2" />
                </div>
            </div>
            <p className="mt-4 text-sm text-blue-200">Loading your workout plan...</p>
        </div>
    );
}


##### Pfad: ./src/components/ImageGallery.tsx #####
import React from 'react';
import { useFeedbackStore } from '../store/feedbackStore';

export function ImageGallery() {
    const images = useFeedbackStore((state) =>
        state.feedbacks
            .filter(f => state.responses.get(f.id)?.imageUrl)
            .map(f => ({
                id: f.id,
                url: state.responses.get(f.id)!.imageUrl!,
                text: f.content
            }))
    );

    if (images.length === 0) {
        return (
            <div className="glassmorphism p-4 text-center">
                <p className="text-blue-200">Exercise demonstrations will appear here</p>
            </div>
        );
    }

    return (
        <div className="space-y-4">
            {images.map((image) => (
                <div key={image.id} className="glassmorphism overflow-hidden rounded-lg">
                    <img
                        src={image.url}
                        alt={image.text}
                        className="w-full h-48 object-cover"
                    />
                    <div className="p-3">
                        <p className="text-sm text-blue-200">{image.text}</p>
                    </div>
                </div>
            ))}
        </div>
    );
}


##### Pfad: ./src/components/ProcessingSteps.tsx #####
import React from 'react';
import {
    Brain,
    Image,
    Volume2,
    Dumbbell,
    MessageSquare,
    Sparkles,
    ListChecks
} from 'lucide-react';
import { useFeedbackStore } from '../store/feedbackStore';

export type DetailedProcessingStep =
    | 'initial-analysis'
    | 'plan-creation'
    | 'image-generation'
    | 'audio-generation'
    | 'suggestions'
    | null;

const ProcessingSteps = () => {
    const currentStep = useFeedbackStore((state) => state.currentProcessingStep);

    const steps = [
        {
            id: 'initial-analysis',
            icon: Brain,
            title: "Analyzing Request",
            description: "Processing your fitness query"
        },
        {
            id: 'plan-creation',
            icon: Dumbbell,
            title: "Creating Workout Plan",
            description: "Designing your exercise routine"
        },
        {
            id: 'image-generation',
            icon: Image,
            title: "Generating Visuals",
            description: "Creating exercise demonstrations"
        },
        {
            id: 'audio-generation',
            icon: Volume2,
            title: "Preparing Audio",
            description: "Creating vocal form cues"
        },
        {
            id: 'suggestions',
            icon: ListChecks,
            title: "Finalizing Response",
            description: "Preparing follow-up suggestions"
        }
    ];

    // Find the index of the current step
    const currentStepIndex = steps.findIndex(step => step.id === currentStep);

    return (
        <div className="w-full max-w-2xl mx-auto bg-black/20 backdrop-blur-sm rounded-lg p-6 space-y-6">
            <div className="flex items-center justify-center gap-2">
                <Sparkles className="w-5 h-5 text-blue-400 animate-pulse" />
                <h3 className="text-lg font-medium text-white">AI Coach Working</h3>
            </div>

            <div className="space-y-4">
                {steps.map((step, index) => {
                    const isPast = currentStepIndex > -1 && index < currentStepIndex;
                    const isCurrent = step.id === currentStep;
                    const Icon = step.icon;

                    return (
                        <div
                            key={step.id}
                            className={`flex items-center gap-4 p-3 rounded-lg transition-all duration-300 ${
                                isCurrent ? 'bg-blue-500/20 border border-blue-500/30' :
                                    isPast ? 'opacity-50' : 'opacity-30'
                            }`}
                        >
                            <div className={`p-2 rounded-full ${
                                isCurrent ? 'bg-blue-500/20' : 'bg-white/10'
                            }`}>
                                <Icon className={`w-5 h-5 ${
                                    isCurrent ? 'text-blue-400 animate-pulse' : 'text-blue-200'
                                }`} />
                            </div>

                            <div className="flex-1">
                                <h4 className="text-white font-medium">{step.title}</h4>
                                <p className="text-sm text-blue-200">{step.description}</p>
                            </div>

                            {isCurrent && (
                                <div className="flex space-x-1">
                                    {[...Array(3)].map((_, i) => (
                                        <div
                                            key={i}
                                            className="w-1.5 h-1.5 rounded-full bg-blue-400 animate-bounce"
                                            style={{
                                                animationDelay: `${i * 0.2}s`
                                            }}
                                        />
                                    ))}
                                </div>
                            )}
                        </div>
                    );
                })}
            </div>

            {!currentStep && (
                <div className="text-center text-blue-200 text-sm">
                    Ready for your next question
                </div>
            )}
        </div>
    );
};

export default ProcessingSteps;


##### Pfad: ./src/components/ResponseDisplay.tsx #####
// ResponseDisplay.tsx
import React from 'react';
import { Volume2, Image, Dumbbell, MessageSquare, HelpCircle } from 'lucide-react';
import { useFeedbackStore } from '../store/feedbackStore';
import { DumbbellLoader } from './LoadingSpinner';

export function ResponseDisplay() {
    const response = useFeedbackStore((state) => state.currentResponse);
    const isProcessing = useFeedbackStore((state) => state.isProcessing);
    const addFeedback = useFeedbackStore((state) => state.addFeedback);

    if (isProcessing) {
        return <DumbbellLoader />;
    }

    if (!response) return null;

    const handleSuggestionClick = (suggestion: string) => {
        addFeedback({
            content: suggestion,
            type: 'text'
        });
    };

    const TypeIcon = {
        feedback: MessageSquare,
        training: Dumbbell,
        question: HelpCircle
    }[response.type];

    return (
        <div className="bg-white/10 backdrop-blur-sm border border-white/20 rounded-lg p-6">
            <div className="flex items-center gap-2 mb-4">
                <TypeIcon className="w-5 h-5 text-blue-400" />
                <span className="text-sm font-medium text-blue-200 capitalize">
          {response.type} Response
        </span>
            </div>

            <div className="flex flex-col gap-6">
                {response.text && (
                    <p className="text-white text-lg">{response.text}</p>
                )}

                {response.workout && (
                    <div className="space-y-4">
                        {response.workout.map((exercise, index) => (
                            <div key={index} className="bg-blue-500/10 rounded-lg p-4 border border-blue-500/20">
                                <div className="flex justify-between items-center mb-3">
                                    <h3 className="text-white font-medium flex items-center gap-2">
                                        <Dumbbell className="w-4 h-4" />
                                        {exercise.machine}
                                    </h3>
                                    <span className="text-blue-200 text-sm">Machine #{exercise.number}</span>
                                </div>
                                <div className="grid grid-cols-3 gap-4 mb-3">
                                    <div>
                                        <span className="text-blue-200 text-xs block">Sets</span>
                                        <span className="text-white font-medium">{exercise.sets}</span>
                                    </div>
                                    <div>
                                        <span className="text-blue-200 text-xs block">Reps</span>
                                        <span className="text-white font-medium">{exercise.reps}</span>
                                    </div>
                                    <div>
                                        <span className="text-blue-200 text-xs block">Weight</span>
                                        <span className="text-white font-medium">{exercise.weight}</span>
                                    </div>
                                </div>
                                {exercise.notes && (
                                    <p className="text-blue-200 text-sm italic">{exercise.notes}</p>
                                )}
                            </div>
                        ))}
                    </div>
                )}

                {response.imageUrl && (
                    <div className="mt-2 rounded-lg overflow-hidden border border-white/10">
                        <img
                            src={response.imageUrl}
                            alt="Exercise Demonstration"
                            className="w-full h-64 object-cover"
                        />
                    </div>
                )}

                {response.audioUrl && (
                    <div className="flex items-center gap-2 bg-blue-500/10 p-2 rounded-lg">
                        <Volume2 className="w-5 h-5 text-blue-400" />
                        <audio controls className="flex-1">
                            <source src={response.audioUrl} type="audio/mpeg" />
                        </audio>
                    </div>
                )}

                {response.suggestions && response.suggestions.length > 0 && (
                    <div className="flex flex-wrap gap-2 mt-2">
                        {response.suggestions.map((suggestion, index) => (
                            <button
                                key={index}
                                onClick={() => handleSuggestionClick(suggestion)}
                                className="text-sm px-3 py-1 rounded-full bg-blue-500/20 text-blue-200 hover:bg-blue-500/30 transition-colors"
                            >
                                {suggestion}
                            </button>
                        ))}
                    </div>
                )}
            </div>
        </div>
    );
}


##### Pfad: ./src/components/ChatHistory.tsx #####
import React from 'react';
import { useFeedbackStore } from '../store/feedbackStore';
import { ResponseMessage } from './ResponseMessage';
import ProcessingSteps from './ProcessingSteps';

export function ChatHistory() {
    const { chatHistory, isProcessing } = useFeedbackStore();

    return (
        <div className="space-y-6">
            {isProcessing && (
                <div className="mb-6">
                    <ProcessingSteps />
                </div>
            )}

            {chatHistory.map((message) => (
                <div
                    key={message.id}
                    className={`${
                        message.type === 'user' ? 'ml-auto max-w-xl' : 'mr-auto max-w-2xl'
                    }`}
                >
                    {message.type === 'user' ? (
                        <div className="bg-blue-500/20 rounded-lg p-4">
                            <p className="text-white">{message.content}</p>
                            <span className="text-xs text-blue-200">
                                {message.timestamp.toLocaleTimeString()}
                            </span>
                        </div>
                    ) : (
                        message.response && <ResponseMessage response={message.response} />
                    )}
                </div>
            ))}

            {chatHistory.length === 0 && !isProcessing && (
                <div className="text-center space-y-4">
                    <p className="text-blue-200">
                        Welcome to your AI Fitness Coach! Ask me anything about workouts,
                        exercises, or fitness advice.
                    </p>
                    <div className="flex flex-wrap justify-center gap-2">
                        {[
                            "Create a beginner workout plan",
                            "How to do a proper squat?",
                            "Best exercises for core strength"
                        ].map((suggestion) => (
                            <button
                                key={suggestion}
                                onClick={() => {
                                    const addMessage = useFeedbackStore.getState().addMessage;
                                    addMessage(suggestion, 'text');
                                }}
                                className="text-sm px-3 py-1 rounded-full bg-blue-500/20 text-blue-200 hover:bg-blue-500/30 transition-colors"
                            >
                                {suggestion}
                            </button>
                        ))}
                    </div>
                </div>
            )}
        </div>
    );
}


##### Pfad: ./src/components/ResponseMessage.tsx #####
import React from 'react';
import { Volume2, Dumbbell, MessageSquare, HelpCircle } from 'lucide-react';
import { OpenAIServiceResponse } from '../services/openai';
import { useFeedbackStore } from '../store/feedbackStore';

interface ResponseMessageProps {
    response: OpenAIServiceResponse;
}

export function ResponseMessage({ response }: ResponseMessageProps) {
    const addMessage = useFeedbackStore((state) => state.addMessage);

    const TypeIcon = {
        feedback: MessageSquare,
        training: Dumbbell,
        question: HelpCircle
    }[response.type];

    const handleSuggestionClick = (suggestion: string) => {
        addMessage(suggestion, 'text');
    };

    const renderSuggestions = () => {
        if (!response.suggestions || !Array.isArray(response.suggestions)) {
            return null;
        }

        return (
            <div className="flex flex-wrap gap-2 mt-2">
                {response.suggestions.map((suggestion, index) => {
                    // Stelle sicher, dass wir einen String haben
                    const suggestionText = typeof suggestion === 'string'
                        ? suggestion
                        : typeof suggestion === 'object' && suggestion.question
                            ? suggestion.question
                            : String(suggestion);

                    return (
                        <button
                            key={index}
                            onClick={() => handleSuggestionClick(suggestionText)}
                            className="text-sm px-3 py-1 rounded-full bg-blue-500/20 text-blue-200 hover:bg-blue-500/30 transition-colors"
                        >
                            {suggestionText}
                        </button>
                    );
                })}
            </div>
        );
    };

    return (
        <div className="bg-white/10 backdrop-blur-sm border border-white/20 rounded-lg p-6">
            <div className="flex items-center gap-2 mb-4">
                {TypeIcon && <TypeIcon className="w-5 h-5 text-blue-400" />}
                <span className="text-sm font-medium text-blue-200 capitalize">
                    {response.type} Response
                </span>
            </div>

            <div className="flex flex-col gap-6">
                {response.text && (
                    <p className="text-white text-lg">{response.text}</p>
                )}

                {response.workout && Array.isArray(response.workout) && (
                    <div className="space-y-4">
                        {response.workout.map((exercise, index) => (
                            <div key={index} className="bg-blue-500/10 rounded-lg p-4 border border-blue-500/20">
                                <div className="flex justify-between items-center mb-3">
                                    <h3 className="text-white font-medium flex items-center gap-2">
                                        <Dumbbell className="w-4 h-4" />
                                        {exercise.machine}
                                    </h3>
                                    <span className="text-blue-200 text-sm">Machine #{exercise.number}</span>
                                </div>
                                <div className="grid grid-cols-3 gap-4 mb-3">
                                    <div>
                                        <span className="text-blue-200 text-xs block">Sets</span>
                                        <span className="text-white font-medium">{exercise.sets}</span>
                                    </div>
                                    <div>
                                        <span className="text-blue-200 text-xs block">Reps</span>
                                        <span className="text-white font-medium">{exercise.reps}</span>
                                    </div>
                                    <div>
                                        <span className="text-blue-200 text-xs block">Weight</span>
                                        <span className="text-white font-medium">{exercise.weight}</span>
                                    </div>
                                </div>
                                {exercise.notes && (
                                    <p className="text-blue-200 text-sm italic">{exercise.notes}</p>
                                )}
                            </div>
                        ))}
                    </div>
                )}

                {response.imageUrl && (
                    <div className="mt-2 rounded-lg overflow-hidden border border-white/10">
                        <img
                            src={response.imageUrl}
                            alt="Exercise Demonstration"
                            className="w-full h-64 object-cover"
                        />
                    </div>
                )}

                {response.audioUrl && (
                    <div className="flex items-center gap-2 bg-blue-500/10 p-2 rounded-lg">
                        <Volume2 className="w-5 h-5 text-blue-400" />
                        <audio controls className="flex-1">
                            <source src={response.audioUrl} type="audio/mpeg" />
                        </audio>
                    </div>
                )}

                {renderSuggestions()}
            </div>
        </div>
    );
}


##### Pfad: ./src/components/FeedbackList.tsx #####
import React from 'react';
import { MessageSquare, Mic } from 'lucide-react';
import { useFeedbackStore } from '../store/feedbackStore';

export function FeedbackList() {
    const feedbacks = useFeedbackStore((state) => state.feedbacks);

    return (
        <div className="space-y-4 max-w-2xl mx-auto">
            {feedbacks.map((feedback) => (
                <div
                    key={feedback.id}
                    className={`flex items-start gap-3 p-4 rounded-lg ${
                        feedback.processed
                            ? 'bg-white/5 border border-white/10'
                            : 'bg-white/10 border border-white/20'
                    }`}
                >
                    {feedback.type === 'text' ? (
                        <MessageSquare className="w-5 h-5 text-blue-400" />
                    ) : (
                        <Mic className="w-5 h-5 text-green-400" />
                    )}
                    <div>
                        <p className="text-white">{feedback.content}</p>
                        <span className="text-sm text-blue-200">
              {new Date(feedback.timestamp).toLocaleString()}
            </span>
                    </div>
                    {!feedback.processed && (
                        <div className="animate-pulse-slow w-2 h-2 rounded-full bg-blue-500" />
                    )}
                </div>
            ))}
            {feedbacks.length === 0 && (
                <p className="text-center text-blue-200">No messages yet</p>
            )}
        </div>
    );
}


##### Pfad: ./src/vite-env.d.ts #####
/// <reference types="vite/client" />



##### Pfad: ./src/services/openai.ts #####
import OpenAI from 'openai';
import {DetailedProcessingStep} from '../store/feedbackStore';

const openai = new OpenAI({
    apiKey: import.meta.env.VITE_OPENAI_API_KEY,
    dangerouslyAllowBrowser: true
});

export interface OpenAIServiceResponse {
    text?: string;
    imageUrl?: string;
    audioUrl?: string;
    type: 'feedback' | 'training' | 'question';
    suggestions?: string[];
    workout?: {
        machine: string;
        number: number;
        sets: number;
        reps: number | string;
        weight: string;
        notes?: string;
    }[];
}

export const openAIService = {
    async generateSpeech(text: string): Promise<string> {
        const mp3 = await openai.audio.speech.create({
            model: "tts-1",
            voice: "alloy",
            input: text,
        });
        return URL.createObjectURL(new Blob([await mp3.arrayBuffer()], {type: 'audio/mpeg'}));
    },

    async transcribeAudio(audioBlob: Blob): Promise<string> {
        const transcription = await openai.audio.transcriptions.create({
            file: new File([audioBlob], "audio.webm", {type: "audio/webm"}),
            model: "whisper-1",
        });
        return transcription.text;
    },

    async generateImage(exercise: string): Promise<string> {
        try {
            const safeExercise = exercise
                .replace(/[^\w\s-]/g, '')  // Entferne spezielle Zeichen
                .trim();

            const response = await openai.images.generate({
                model: "dall-e-3",
                prompt: `Simple digital line drawing of ${safeExercise} motion in a health and wellness context. Focus on technical form, educational style, basic shapes. Safe for all audiences.`,
                n: 1,
                size: "1024x1024",
                style: "natural",
                quality: "standard"
            });

            if (!response.data[0]?.url) {
                console.error('No image URL in response');
                return '';
            }

            return response.data[0].url;
        } catch (error) {
            console.error('Image generation error:', error);
            return '';
        }
    },

    async processFeedback(
        content: string,
        type: 'text' | 'audio',
        onStepChange?: (step: DetailedProcessingStep) => void
    ): Promise<OpenAIServiceResponse> {
        try {
            // Step 1: Initial Analysis
            onStepChange?.('initial-analysis');
            const initialResponse = await openai.chat.completions.create({
                model: "gpt-4",
                messages: [
                    {
                        role: "system",
                        content: `You are an experienced gym trainer having a real-time conversation. 
                        You should ALWAYS respond in this EXACT format:

                        1. First line: One brief sentence greeting/response
                        2. If exercise-related, include:
                        WORKOUT_PLAN: [
                          {
                            "machine": "Machine name",
                            "number": machine_number,
                            "sets": 3-4,
                            "reps": "8-12",
                            "weight": "specific recommendation",
                            "notes": "form tips"
                          }
                        ]
                        3. For visual demos, add: GENERATE_IMAGE: [exercise name]
                        4. For form cues, add: GENERATE_AUDIO: [instruction]`
                    },
                    {
                        role: "user",
                        content
                    }
                ],
                temperature: 0.7,
                max_tokens: 500
            });

            const responseText = initialResponse.choices[0].message.content || '';
            const lines = responseText.split('\n');

            const response: OpenAIServiceResponse = {
                text: lines[0],
                type: lines[0].toLowerCase().includes('machine') ||
                lines[0].toLowerCase().includes('exercise') ? 'training' : 'question'
            };

            // Step 2: Parse workout plan if present
            const workoutMatch = lines.join('\n').match(/WORKOUT_PLAN: (\[[\s\S]*?\])/);
            if (workoutMatch) {
                onStepChange?.('plan-creation');
                try {
                    response.workout = JSON.parse(workoutMatch[1]);
                    await new Promise(resolve => setTimeout(resolve, 1000));
                } catch (error) {
                    console.error('Failed to parse workout plan:', error);
                }
            }

            // Step 3: Handle image generation
            const imageMatch = lines.find(line => line.startsWith('GENERATE_IMAGE:'));
            if (imageMatch) {
                onStepChange?.('image-generation');
                try {
                    const imagePrompt = imageMatch.replace('GENERATE_IMAGE:', '').trim();
                    console.log('Starting image generation for:', imagePrompt);

                    const imageUrl = await this.generateImage(imagePrompt);
                    console.log('Image URL generated:', imageUrl ? 'Success' : 'Failed');

                    if (imageUrl) {
                        response.imageUrl = imageUrl;
                    } else {
                        console.error('Image generation returned empty URL');
                    }
                } catch (error) {
                    console.error('Error during image generation step:', error);
                }
                await new Promise(resolve => setTimeout(resolve, 1000));
            }

            // Step 4: Handle audio generation
            const audioMatch = lines.find(line => line.startsWith('GENERATE_AUDIO:'));
            if (audioMatch || type === 'audio') {
                onStepChange?.('audio-generation');
                try {
                    const audioInput = audioMatch ?
                        audioMatch.replace('GENERATE_AUDIO:', '').trim() :
                        response.text || '';

                    const audioPrompt = await openai.chat.completions.create({
                        model: "gpt-4o",
                        messages: [
                            {
                                role: "system",
                                content: "You are a fitness instructor creating clear, concise vocal cues. Keep instructions brief and actionable."
                            },
                            {
                                role: "user",
                                content: `Convert this into a clear vocal instruction: ${audioInput}`
                            }
                        ],
                        temperature: 0.5,
                        max_tokens: 100
                    });

                    response.audioUrl = await this.generateSpeech(
                        audioPrompt.choices[0].message.content || audioInput
                    );
                    await new Promise(resolve => setTimeout(resolve, 1000));
                } catch (error) {
                    console.error('Audio generation failed:', error);
                }
            }

            // Step 5: Generate follow-up suggestions
            onStepChange?.('suggestions');
            try {
                const suggestionsResponse = await openai.chat.completions.create({
                    model: "gpt-4o",
                    messages: [
                        {
                            role: "system",
                            content: 'Generate 2-3 brief, relevant follow-up questions about exercise form or alternatives. Return as JSON array.'
                        },
                        {
                            role: "assistant",
                            content: responseText
                        }
                    ],
                    temperature: 0.7,
                    max_tokens: 150
                });

                let suggestionText = suggestionsResponse.choices[0].message.content || '[]';
                suggestionText = suggestionText.replace(/```json\n?|\n?```/g, '');
                suggestionText = suggestionText.match(/\[.*\]/s)?.[0] || '[]';
                response.suggestions = JSON.parse(suggestionText);
                await new Promise(resolve => setTimeout(resolve, 1000));
            } catch (error) {
                console.error('Failed to generate suggestions:', error);
                response.suggestions = [];
            }

            onStepChange?.(null);
            return response;

        } catch (error) {
            console.error('ProcessFeedback error:', error);
            onStepChange?.(null);
            throw error;
        }
    }
};


##### Pfad: ./src/store/feedbackStore.ts #####
import { create } from 'zustand';
import { openAIService, OpenAIServiceResponse } from '../services/openai';

interface ChatMessage {
    id: string;
    type: 'user' | 'assistant';
    content: string;
    timestamp: Date;
    response?: OpenAIServiceResponse;
}

export type DetailedProcessingStep =
    | 'initial-analysis'
    | 'plan-creation'
    | 'image-generation'
    | 'audio-generation'
    | 'suggestions'
    | null;

interface FeedbackState {
    chatHistory: ChatMessage[];
    isProcessing: boolean;
    currentProcessingStep: DetailedProcessingStep;
    addMessage: (content: string, type: 'text' | 'audio') => Promise<void>;
    clearHistory: () => void;
}

export const useFeedbackStore = create<FeedbackState>((set) => ({
    chatHistory: [],
    isProcessing: false,
    currentProcessingStep: null,
    addMessage: async (content, type) => {
        const messageId = crypto.randomUUID();

        set((state) => ({
            isProcessing: true,
            currentProcessingStep: 'initial-analysis',
            chatHistory: [
                {
                    id: messageId,
                    type: 'user',
                    content,
                    timestamp: new Date()
                },
                ...state.chatHistory
            ]
        }));

        try {
            const response = await openAIService.processFeedback(
                content,
                type,
                (step: DetailedProcessingStep) => set({ currentProcessingStep: step })
            );

            set((state) => ({
                isProcessing: false,
                currentProcessingStep: null,
                chatHistory: [
                    {
                        id: crypto.randomUUID(),
                        type: 'assistant',
                        content: response.text || '',
                        timestamp: new Date(),
                        response
                    },
                    ...state.chatHistory
                ]
            }));
        } catch (error) {
            console.error('Error processing message:', error);
            set((state) => ({
                isProcessing: false,
                currentProcessingStep: null,
                chatHistory: [
                    {
                        id: crypto.randomUUID(),
                        type: 'assistant',
                        content: 'Sorry, there was an error processing your request.',
                        timestamp: new Date(),
                        response: {
                            text: 'Sorry, there was an error processing your request.',
                            type: 'feedback'
                        }
                    },
                    ...state.chatHistory
                ]
            }));
        }
    },
    clearHistory: () => set({
        chatHistory: [],
        currentProcessingStep: null,
        isProcessing: false
    })
}));


